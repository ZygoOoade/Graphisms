import discord
from discord.ext import commands
from gradio_client import Client
from PIL import Image
from io import BytesIO
import asyncio
import os
import tempfile

bot = commands.Bot(command_prefix=">", intents=discord.Intents.all())

midjourney_client = Client("mukaist/Midjourney")
dalle_client = Client("mukaist/DALLE-4K")
stable_diffusion_client = Client("stabilityai/stable-diffusion-3-medium")
pixart_client = Client("PixArt-alpha/PixArt-Sigma")
flux_schnell_client = Client("black-forest-labs/FLUX.1-schnell")
flux_dev_client = Client("black-forest-labs/FLUX.1-dev")

# ... (keeping the existing generate_* functions)

async def generate_flux_image(prompt: str, client, model_name):
    try:
        result = await asyncio.to_thread(
            client.predict,
            prompt=prompt,
            seed=0,
            randomize_seed=True,
            width=1024,
            height=1024,
            num_inference_steps=10,
            api_name="/infer"
        )
        image_path = result[0] if isinstance(result, tuple) else result
        return [image_path], f"FLUX.1-{model_name}"
    except Exception as e:
        print(f"Error generating FLUX.1-{model_name} image: {e}")
        return None, f"FLUX.1-{model_name}"

async def generate_flux_schnell_image(prompt: str):
    return await generate_flux_image(prompt, flux_schnell_client, "schnell")

async def generate_flux_dev_image(prompt: str):
    return await generate_flux_image(prompt, flux_dev_client, "dev")

@bot.event
async def on_ready():
    print(f"Logged in as: {bot.user.name}!")

@bot.command(name="gen")
async def askai(ctx: commands.Context, *, prompt: str):
    initial_message = await ctx.reply("Generating images from Midjourney, DALL-E, Stable Diffusion, PixArt-alpha, FLUX.1-schnell, and FLUX.1-dev, please wait...")

    tasks = [
        generate_midjourney_image(prompt),
        generate_dalle_image(prompt),
        generate_stable_diffusion_image(prompt),
        generate_pixart_image(prompt),
        generate_flux_schnell_image(prompt),
        generate_flux_dev_image(prompt)
    ]

    all_files = []
    ai_results = []
    temp_files = []

    async def process_result(image_paths, ai_type):
        nonlocal all_files, ai_results, temp_files
        if image_paths:
            for i, image_path in enumerate(image_paths):
                with open(image_path, 'rb') as f:
                    image_data = f.read()
                image = Image.open(BytesIO(image_data))

                # Save the image to a temporary file
                temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
                image.save(temp_file.name, format="PNG")
                temp_files.append(temp_file.name)

                file = discord.File(temp_file.name, filename=f'{ai_type}_image_{i+1}.png')
                all_files.append(file)

                if os.path.exists(image_path):
                    os.remove(image_path)

            ai_results.append(ai_type)

            # Update the message with all accumulated images
            current_content = f"Images generated by: {', '.join(ai_results)}"
            new_files = [discord.File(temp_file, filename=f'image_{i+1}.png') for i, temp_file in enumerate(temp_files)]
            await initial_message.edit(content=current_content, attachments=new_files)

    try:
        for completed_task in asyncio.as_completed(tasks):
            image_paths, ai_type = await completed_task
            await process_result(image_paths, ai_type)

        if not all_files:
            await initial_message.edit(content="Sorry, I couldn't generate any images. Please try again.")
    finally:
        # Clean up temporary files
        for temp_file in temp_files:
            try:
                os.remove(temp_file)
            except Exception as e:
                print(f"Error removing temporary file {temp_file}: {e}")
